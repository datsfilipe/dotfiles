if [ -f flake.nix ]; then
  use flake
fi

root_dir=$(git rev-parse --show-toplevel)

nixos_switch() {
  local target=".#$1"
  local mode="$2"

  if [ "$mode" = "debug" ]; then
    nixos-rebuild switch --flake "$target" --show-trace --verbose
  elif [ "$mode" = "update" ]; then
    nix flake update
    nixos-rebuild switch --recreate-lock-file --flake "$target"
  else
    nix flake update datsnvim
    nix flake update unix-scripts
    nixos-rebuild switch --flake "$target"
  fi
}

nixos_build() {
  local target=".#$1"
  local mode="$2"

  if [ "$mode" = "debug" ]; then
    nixos-rebuild build --flake "$target" --show-trace --verbose
  elif [ "$mode" = "update" ]; then
    pushd "$root_dir"

    ./scripts/update-nupkgs.sh ./modules/nupkgs

    nix flake update
    nixos-rebuild build --flake "$target"

    popd || exit 1
  else
    nixos-rebuild build --flake "$target"
  fi
}

export_function() {
  local name=$1
  local alias_dir=$PWD/.direnv/aliases
  mkdir -p "$alias_dir"
  PATH_add "$alias_dir"
  local target="$alias_dir/$name"
  if declare -f "$name" >/dev/null; then
    echo "#!$SHELL" > "$target"
    declare -f "$name" >> "$target"
    echo "$name \"\$@\"" >> "$target"
    chmod +x "$target"
  fi
}

generate_flake() {
  if [ -f flake.nix ]; then
    if ! command -v trash &> /dev/null; then
      rm flake.nix
    else
      trash flake.nix
    fi
  fi

  nix eval --raw -f templates/flake.template.nix flake > flake.nix
  alejandra flake.nix
}

run_lib_tests() {
  pushd "$root_dir" || exit 1
  nix-shell -p nix-unit --run "nix-unit ./lib/spec.nix --gc-roots-dir ./.result-test"
  popd || exit 1
}

export_function nixos_switch
export_function nixos_build
export_function generate_flake
export_function run_lib_tests
